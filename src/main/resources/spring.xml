<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.icinfo">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 通用session工厂配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 使用通用数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.icinfo.platform.*.model"/>
        <property name="mapperLocations">
            <list>
                <value>
                    classpath*:**/mapper/mapping/*Mapper.xml
                </value>
                <value>
                    classpath*:**/dao/mapping/*Mapper.xml
                </value>
            </list>
        </property>
        <!--<property name="plugins">-->
        <!--<array>-->
        <!--<bean class="com.framework.mybatis.pagehelper.PageHelper">-->
        <!--<property name="properties">-->
        <!--<value>-->
        <!--dialect=mysql-->
        <!--reasonable=true-->
        <!--</value>-->
        <!--</property>-->
        <!--</bean>-->
        <!--<bean class="com.icinfo.framework.mybatis.interceptor.PerformanceInterceptor"/>-->
        <!--</array>-->
        <!--</property>-->
    </bean>

    <!-- 通用session模板， 供service层使用 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
          scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!-- 通用接口包扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.icinfo.platform.*.mapper,com.icinfo.platform.*.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 通用事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 默认数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${spring.jdbc.driverClass}"/>
        <property name="url" value="${spring.jdbc.jdbcUrl}"/>
        <property name="username" value="${spring.jdbc.user}"/>
        <property name="password" value="${spring.jdbc.password}"/>

        <property name="filters" value="stat"/>

        <property name="maxActive" value="${spring.jdbc.maxPoolSize}"/>
        <property name="initialSize" value="${spring.jdbc.minPoolSize}"/>
        <property name="maxWait" value="6000"/>
        <property name="minIdle" value="${spring.jdbc.minIdleSize}"/>

        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <property name="poolPreparedStatements" value="true"/>
        <property name="maxOpenPreparedStatements" value="20"/>

        <!--用于排查连接泄漏 排查问题是启用-->
        <!--<property name="removeAbandoned" value="true"/>-->
        <!--<property name="removeAbandonedTimeout" value="1800" />-->
        <!--<property name="logAbandoned" value="true" />-->
    </bean>

    <!--jobLauncher负责batch的启动工作，jobRepository负责job的整个运行过程中的CRUD操作，transactionManager负责事务的管理操作。-->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <!--   JOB REPOSITORY - WE USE IN-MEMORY REPOSITORY FOR OUR EXAMPLE -->
    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!--captcha 配置-->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <!--<prop key="kaptcha.border.color">105,179,90</prop>-->
                        <!--<prop key="kaptcha.border.thicknes  s"></prop>-->
                        <!--<prop key="kaptcha.producer.impl"></prop>-->
                        <!--<prop key="kaptcha.textproducer.impl"></prop>-->
                        <!--<prop key="kaptcha.textproducer.char.string"></prop>-->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.font.names">Arial,Courier</prop>
                        <prop key="kaptcha.textproducer.font.size">43</prop>
                        <prop key="kaptcha.textproducer.font.color">red</prop>
                        <!--<prop key="kaptcha.textproducer.char.space"></prop>-->
                        <!--<prop key="kaptcha.noise.impl"></prop>-->
                        <!--<prop key="kaptcha.noise.color"></prop>-->
                        <!--<prop key="kaptcha.obscurificator.impl"></prop>-->
                        <!--<prop key="kaptcha.word.impl"></prop>-->
                        <!--<prop key="kaptcha.background.impl"></prop>-->
                        <!--<prop key="kaptcha.background.clear.from"></prop>-->
                        <!--<prop key="kaptcha.background.clear.to"></prop>-->
                        <prop key="kaptcha.image.width">135</prop>
                        <prop key="kaptcha.image.height">50</prop>
                        <prop key="kaptcha.session.key">code</prop>
                        <!--<prop key="kaptcha.session.date"></prop>-->
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">ClusterScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <!-- 线程池配置 -->
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">20</prop>
                <prop key="org.quartz.threadPool.threadPriority">5</prop>
                <!-- JobStore 配置 -->
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>

                <!-- 集群配置 -->
                <prop key="org.quartz.jobStore.isClustered">true</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>

                <prop key="org.quartz.jobStore.misfireThreshold">120000</prop>

                <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
            </props>
        </property>

        <property name="schedulerName" value="ClusterScheduler" />

        <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
        <property name="startupDelay" value="30" />

        <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />

        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true" />

        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true" />

        <!--<property name="configLocation" value="classpath:quartz.properties" />-->
    </bean>

    <!-- 定义producer的参数 -->
    <!--<bean id="producerProperties" class="java.util.HashMap">-->
        <!--<constructor-arg>-->
            <!--<map>-->
                <!--&lt;!&ndash;用于建立与kafka集群连接的host/port组&ndash;&gt;-->
                <!--<entry key="bootstrap.servers" value="192.168.1.66:9092"/>-->
                <!--<entry key="retries" value="10"/>-->
                <!--<entry key="batch.size" value="16384"/>-->
                <!--<entry key="linger.ms" value="1"/>-->
                <!--<entry key="buffer.memory" value="33554432"/>-->
                <!--<entry key="key.serializer" value="org.apache.kafka.common.serialization.IntegerSerializer"/>-->
                <!--<entry key="value.serializer" value="org.apache.kafka.common.serialization.StringSerializer"/>-->
            <!--</map>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建kafkatemplate需要使用的producerfactory bean &ndash;&gt;-->
    <!--<bean id="producerFactory" class="org.springframework.kafka.core.DefaultKafkaProducerFactory">-->
        <!--<constructor-arg>-->
            <!--<ref bean="producerProperties"/>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 &ndash;&gt;-->
    <!--<bean id="KafkaTemplate" class="org.springframework.kafka.core.KafkaTemplate">-->
        <!--<constructor-arg ref="producerFactory"/>-->
        <!--<constructor-arg name="autoFlush" value="true"/>-->
        <!--<property name="defaultTopic" value="topic-test"/>-->
    <!--</bean>-->


    <!-- 定义consumer的参数 -->
    <!--<bean id="consumerProperties" class="java.util.HashMap">-->
        <!--<constructor-arg>-->
            <!--<map>-->
                <!--<entry key="bootstrap.servers" value="192.168.1.66:9092"/>-->
                <!--<entry key="group.id" value="test003"/>-->
                <!--<entry key="enable.auto.commit" value="true"/>-->
                <!--<entry key="auto.commit.interval.ms" value="1000"/>-->
                <!--<entry key="session.timeout.ms" value="15000"/>-->
                <!--<entry key="auto.offset.reset" value="earliest"/>-->
                <!--<entry key="key.deserializer" value="org.apache.kafka.common.serialization.IntegerDeserializer"/>-->
                <!--<entry key="value.deserializer" value="org.apache.kafka.common.serialization.StringDeserializer"/>-->
            <!--</map>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建consumerFactory bean &ndash;&gt;-->
    <!--<bean id="consumerFactory" class="org.springframework.kafka.core.DefaultKafkaConsumerFactory">-->
        <!--<constructor-arg>-->
            <!--<ref bean="consumerProperties"/>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 实际执行消息消费的类 &ndash;&gt;-->
    <!--<bean id="messageListernerConsumerService" class="com.icinfo.platform.kafka.api.KafkaConsumer"/>-->

    <!--&lt;!&ndash; 消费者容器配置信息 &ndash;&gt;-->
    <!--<bean id="containerProperties" class="org.springframework.kafka.listener.config.ContainerProperties">-->
        <!--<constructor-arg value="topic-test"/>-->
        <!--<property name="messageListener" ref="messageListernerConsumerService"/>-->
    <!--</bean>-->

    <!--<bean id="messageListenerContainer" class="org.springframework.kafka.listener.KafkaMessageListenerContainer" init-method="doStart">-->
        <!--<constructor-arg ref="consumerFactory"/>-->
        <!--<constructor-arg ref="containerProperties"/>-->
    <!--</bean>-->

    <!--<import resource="classpath:spring-redis.xml"/>-->
</beans>